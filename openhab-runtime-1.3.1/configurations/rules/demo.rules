import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var Number counter = 1
var Number luminosity = 0
var Timer timer = null

rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

rule "Initialise luminosity"
when
	System started
then
	postUpdate(Luminosity, 0)
end

rule "Crontest"
	when 
		Time cron "0/15 * * * * ?"
	then
		say(counter)
		counter = counter + 1
		luminosity = Luminosity.state as DecimalType 
		luminosity = luminosity + 1
		postUpdate(Luminosity, luminosity)
		
end	

rule "To much lights"
	when
		Item Luminosity received update
	then
		if (Luminosity.state > 5) {
			postUpdate(Luminosity, 0)
			sendCommand(Light_Front, DECREASE)
		}
end

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */
rule "Dimmed Light Front"
	when
		Item Light_Front received command
	then
		var Number percent = 0
		if(Light_Front.state instanceof DecimalType) percent = Light_Front.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(Light_Front, percent);
end
rule "Dimmed Light Back"
	when
		Item Light_Back received command
	then
		say("Exterminaaate!")
		var Number percent = 0
		if(Light_Back.state instanceof DecimalType) percent = Light_Back.state as DecimalType
		
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(Light_Back, percent);
end

rule "Color Light Back"
	when
		Item Color_Light_Back received command
	then
		var HSBType hsbValue = Color_Light_Back.state as HSBType

        var Number redValue   = hsbValue.red.intValue
        var Number greenValue = hsbValue.green.intValue
        var Number blueValue  = hsbValue.blue.intValue
        
        say(redValue)
        say(greenValue)
        say(blueValue)
        /*sendCommand( LedR, redValue )
        sendCommand( LedG, greenValue )
        sendCommand( LedB, blueValue )*/
end
rule "Color Light Back"
	when
		Item Color_Light_Front received command
	then
		var HSBType hsbValue = Color_Light_Front.state as HSBType

        var Number redValue   = hsbValue.red.intValue
        var Number greenValue = hsbValue.green.intValue
        var Number blueValue  = hsbValue.blue.intValue
        
        say(redValue)
        say(greenValue)
        say(blueValue)
        /*sendCommand( LedR, redValue )
        sendCommand( LedG, greenValue )
        sendCommand( LedB, blueValue )*/
end

rule "Dimmed Shutter Front Up"
	when
		Item Shutter_Front received command UP
	then
		say("Front Up")
		// Todo : send a command to the motor
		
end
rule "Dimmed Shutter Front Down"
	when
		Item Shutter_Front received command DOWN
	then
		say("Front Down")
		// Todo : send a command to the motor
		
end
rule "Dimmed Shutter Back Up"
	when
		Item Shutter_Back received command UP
	then
		say("Back Up")
		// Todo : send a command to the motor
		
end
rule "Dimmed Shutter Back Down"
	when
		Item Shutter_Back received command DOWN
	then
		say("Back Down")
		// Todo : send a command to the motor
		
end

/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
rule "Select Radio Station"
	when
		Item Radio_Station received command
	then
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}
end

rule turnLightOn
when Item Light_Arduino changed from ON to OFF

then 
	sendCommand(ArduinoController,"a")
end

rule turnLightOff
when Item Light_Arduino changed from OFF to ON

then
	sendCommand(ArduinoController,"b")
end	


