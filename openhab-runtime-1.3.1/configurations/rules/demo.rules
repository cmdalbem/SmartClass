import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.lang.*
var Integer lum = 0
var Boolean autoLum = true

var Number shutdown = 1



// Starting OpenHAB
rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

// Shutting down OpenHAB
rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end


// Initialize the scene 
rule "Initialise luminosity"
when
	System started
then
	postUpdate(Luminosity, 50)
end


// Day is over, school is closed, the light are disabled
rule "Lights off"
	when
		Time cron "0 0 20 ? * MON-FRI" // every day of the week at 20:00:00
	then
		postUpdate(Automatic_Luminosity, OFF)
		sendCommand(Light_Front, OFF)
		sendCommand(Light_Back, OFF)
		shutdown = 0
		say("Lights shut down")
end

// It's not the light, so the light can be switch on
rule "Lights can be on"
	when
		Time cron "0 0 7 ? * MON-FRI" // every day of the week at 7:00:00
	then
		shutdown = 1
		say("Lights can be on")
end

// Control of the alarm
rule "Lights on"
	when
		Item Mouvement_Detector received update ON
	then
		if (shutdown == 1) {
			shutdown = 2
			postUpdate(Automatic_Luminosity, ON)
			sendCommand(Light_Front, ON)
			sendCommand(Light_Back, ON)
			say("Lights on!")
		} else if (shutdown == 0) {
			say("ALARM!")
			sendMail("grandemange.kevin@gmail.com",
				"Alarm : Intrusion in classroom", 
				"An intrusion has been seen in the classroom."
			)
		}
end


// using the camera in order to detect movement in the room
rule "Mouvement Detection"
	when
		Item Mouvement_Detector received update
	then
		if (Mouvement_Detector.state==ON) {
			say("Mouvement!")
		}
end

rule "Professor scan tag"
	when
		Item Professor_Presence received update ON
	then
		sendHttpGetRequest("http://192.168.42.1:1000/active_stream?on=true")
end

rule "End of course"
	when
		Item Professor_Presence received update OFF
	then
		sendHttpGetRequest("http://192.168.42.1:1000/active_stream?on=false")
end

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */
rule "Dimmed Light Front"
	when
		Item Light_Front received command
	then
		var Number percent = 0
		if(Light_Front.state instanceof DecimalType) percent = Light_Front.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(Light_Front, percent);
end

rule "Dimmed Light Back"
	when
		Item Light_Back received command
	then
		var Number percent = 0
		if(Light_Back.state instanceof DecimalType) percent = Light_Back.state as DecimalType
		
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(Light_Back, percent);
end

rule "Room Light"
	when
		Item White_Light received command
	then
		var Number percent = 0
		if(White_Light.state instanceof DecimalType) percent = White_Light.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(White_Light, percent);
end

rule "Shutter Back"
	when
		Item Shutter_Back received command
	then
		var Number percent = 0
		if(Shutter_Back.state instanceof DecimalType) percent = Shutter_Back.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(Shutter_Front, percent);
end

rule "Shutter Front"
	when
		Item Shutter_Front received command
	then
		var Number percent = 0
		if(Shutter_Front.state instanceof DecimalType) percent = Shutter_Front.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(Shutter_Front, percent);
end

// Serial control of the RGB led with the use of the OpenHAB 
rule "Color Light Front"
	when
		Item Color_Light_Front received command
	then
		var HSBType hsbValue = Color_Light_Front.state as HSBType

        var Number redValue   = hsbValue.red.intValue
        var Number greenValue = hsbValue.green.intValue
        var Number blueValue  = hsbValue.blue.intValue
        var String res = "rgb:" + redValue + ":" + greenValue + ":" + blueValue + ":"
        sendCommand( ArduinoControllerRGB, res )
        sendMail("julien.fleury@ensimag.grenoble-inp.fr", "Alarm : Intrusion in classroom", "An intrusion has been seen in the classroom. Please check ")
end

rule "Scene changing"
	when
		Item Scene_General received command
	then
		var Number scene = 0
		if(Scene_General.state instanceof DecimalType) scene = Scene_General.state as DecimalType
		
		var H = 0
		var S = 0
		var B = 0
        
		switch(scene) {
			case 0 : {
				// nothing
			}
			case 1 : {
				// White: during a course
				H = 0
				S = 0
				B = 100
			}
			case 2 : {
				// Orange/Yellow: conference
				H = 30
				S = 100
				B = 100
			}
			case 3 : {
				// Blue: before exam
				H = 240
				S = 100
				B = 100
			}
			case 4 : {
				// Green: during exam
				H = 120
				S = 100
				B = 100
			}
		}
		if (scene != 0) {
			sendCommand(Color_Light_Front, H+","+S+","+B)	
		}
end

/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
rule "Select Radio Station"
	when
		Item Radio_Station received command
	then
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}
end

rule turnLightOn
when Item Light_Arduino changed from ON to OFF

then 
	sendCommand(ArduinoController,"abc\r\n")
end

rule turnLightOff
when Item Light_Arduino changed from OFF to ON

then
	sendCommand(ArduinoController,"abc\r\n")
end	

// Get the luminosity from the arduino sensor 
rule controlLuminosity
when Item ArduinoControllerLUM received update

then
		lum=0
		if (ArduinoControllerLUM.state.toString().substring(0,3).equals("lum")) {
			var i = 4
			while (ArduinoControllerLUM.state.toString().charAt(i) != ":".charAt(0)) {
				lum = lum * 10 + ArduinoControllerLUM.state.toString().charAt(i) - '0'.charAt(0)
				i=i+1
				var String res = "LUM char=" + ArduinoControllerLUM.state.toString().charAt(i) + "courlum = " + lum 
				println(res)
			}
			postUpdate(Luminosity,lum/10)
			var String res='www:' + lum + ':'
			if (autoLum) {
				sendCommand(ArduinoControllerRGB, res)
			}
		}
		
	
end

rule autoLumOn
when Item Automatic_Luminosity changed from OFF to ON
then
	autoLum = true
end
rule autoLumOff
when Item Automatic_Luminosity changed from ON to OFF
then
	autoLum = false
end

rule manualLum

when Item White_Light received update
then
	var String res = 'mmm:' + (White_Light.state as DecimalType).intValue*10 + ':'
	sendCommand(ArduinoControllerRGB,res)
end

rule shutterFrontControl 
when Item Shutter_Front received update
then
	var String res = "vl1:" + (Shutter_Front.state as DecimalType).intValue*10 + ':' 
	sendCommand(ArduinoControllerMOTOR,res)
end

rule shutterBackControl
when Item Shutter_Back received update
then
	var String res = "vl2:" + (Shutter_Front.state as DecimalType).intValue*10 + ':'
	sendCommand(ArduinoControllerMOTOR,res)
end


